plugins {
    id 'java'
    id 'java-library'
}

group = 'io.rhythmknights'
version = '2.1-HORIZON'
description = 'A powerful tag/prefix management plugin with CoreAPI, CoreFramework, LuckPerms, PlaceholderAPI, Vault & Adventure support.'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()

    // Spigot
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    // Sonatype
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    // LuckPerms
    maven {
        name = 'luckperms'
        url = 'https://repo.luckperms.net/'
    }

    // PlaceholderAPI
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    // JitPack for Vault
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }

    // Local libs directory
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Spigot API - Updated to latest version
    compileOnly 'org.spigotmc:spigot-api:1.21.5-R0.1-SNAPSHOT'

    // Adventure Platform - Updated versions (provided by CoreFramework at runtime)
    compileOnly 'net.kyori:adventure-platform-bukkit:4.4.0'
    compileOnly 'net.kyori:adventure-text-minimessage:4.21.0'
    compileOnly 'net.kyori:adventure-text-serializer-legacy:4.21.0'
    compileOnly 'net.kyori:adventure-text-serializer-plain:4.21.0'

    // CoreFramework and CoreAPI - These will be separate JARs on the server
    // Use compileOnly since they'll be loaded as separate plugins
    compileOnly files('libs/CoreFramework-2.0-HORIZON.jar')
    compileOnly files('libs/CoreAPI-2.0-HORIZON.jar')

    // LuckPerms API
    compileOnly 'net.luckperms:api:5.4'

    // PlaceholderAPI - Updated version
    compileOnly 'me.clip:placeholderapi:2.11.6'

    // Vault API
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'

    // JetBrains Annotations
    compileOnly 'org.jetbrains:annotations:24.0.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

// Configure Gradle's default 'jar' task
jar {
    dependsOn(project.tasks.compileJava) // Ensure compilation before jarring
    archiveBaseName = project.name
    archiveVersion = project.version
    // Explicitly set the destination and file name
    destinationDirectory = file("${buildDir}/libs")
    archiveFileName = "${project.name}-${version}.jar"
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'RhythmKnights',
            'Built-By': System.getProperty('user.name'),
            'Build-Timestamp': new Date(),
            'Build-Jdk': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})",
            'Build-OS': "${System.getProperty('os.name')} ${System.getProperty('os.arch')} ${System.getProperty('os.version')}"
        )
    }
    from sourceSets.main.output

    // Error Logging for 'jar' task
    doLast {
        if (it.state.failure) {
            ant.mkdir(dir: "${buildDir}/logs")
            ant.echo(file: "${buildDir}/logs/error.jar.log", append: false, message: it.state.failure.exception.message)
        }
    }
}

// Configure Gradle's default 'javadoc' task
javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    title = "CoreTags ${project.version}"

    // Error Logging for 'javadoc' task
    doLast {
        if (it.state.failure) {
            ant.mkdir(dir: "${buildDir}/logs")
            ant.echo(file: "${buildDir}/logs/error.javadoc.log", append: false, message: it.state.failure.exception.message)
        }
    }
}

// Register the 'fullbuild' task to depend on default jar and javadoc tasks
tasks.register('fullbuild') {
    dependsOn tasks.javadoc
    dependsOn tasks.jar
}